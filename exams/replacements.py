# exams/replacements.py
"""
Code qui REMPLACE les middlewares Django quand ils sont d√©sactiv√©s
Ce fichier montre ce que Django fait automatiquement en interne
"""

import hashlib
from django.contrib.auth.models import User
from django.contrib.sessions.backends.db import SessionStore
from django.contrib.sessions.models import Session
from django.http import HttpResponseForbidden
from django.utils.deprecation import MiddlewareMixin


# ========================================
# REMPLACE SessionMiddleware
# ========================================
class ManualSessionMiddleware(MiddlewareMixin):
    """
    Ce que Django fait automatiquement avec SessionMiddleware :
    - Charger la session depuis la base de donn√©es
    - Cr√©er request.session
    - Sauvegarder automatiquement les modifications
    """
    
    def process_request(self, request):
        """AVANT que la vue soit appel√©e"""
        print("üîµ [MANUEL] SessionMiddleware activ√©")
        
        # 1. Lire le cookie 'sessionid'
        session_key = request.COOKIES.get('sessionid')
        
        # 2. Charger la session depuis la DB ou cr√©er une nouvelle
        if session_key:
            try:
                Session.objects.get(session_key=session_key)
                request.session = SessionStore(session_key)
                print(f"   ‚úÖ Session charg√©e : {session_key[:16]}...")
            except Session.DoesNotExist:
                request.session = SessionStore()
                print(f"   üÜï Session invalide, nouvelle cr√©√©e")
        else:
            request.session = SessionStore()
            print(f"   üÜï Nouvelle session cr√©√©e")
    
    def process_response(self, request, response):
        """APR√àS que la vue a √©t√© ex√©cut√©e"""
        
        if hasattr(request, 'session'):
            # 3. Sauvegarder la session en DB
            if request.session.modified or request.session.is_empty():
                request.session.save()
                print(f"   üíæ Session sauvegard√©e en DB")
            
            # 4. Ajouter le cookie √† la r√©ponse
            response.set_cookie(
                key='sessionid',
                value=request.session.session_key,
                max_age=3600,
                httponly=True,
                secure=False,
                samesite='Lax'
            )
            print(f"   üç™ Cookie 'sessionid' envoy√© au client")
        
        return response


# ========================================
# REMPLACE AuthenticationMiddleware
# ========================================
class ManualAuthMiddleware(MiddlewareMixin):
    """
    Ce que Django fait automatiquement avec AuthenticationMiddleware :
    - Lire '_auth_user_id' dans la session
    - Charger l'utilisateur depuis User.objects
    - Cr√©er request.user
    """
    
    def process_request(self, request):
        """AVANT que la vue soit appel√©e"""
        print("üü¢ [MANUEL] AuthenticationMiddleware activ√©")
        
        # 1. V√©rifier qu'une session existe
        if not hasattr(request, 'session'):
            request.user = AnonymousUserManual()
            print("   ‚ùå Pas de session, utilisateur anonyme")
            return
        
        # 2. R√©cup√©rer l'ID de l'utilisateur depuis la session
        user_id = request.session.get('_auth_user_id')
        
        # 3. Charger l'utilisateur depuis la base de donn√©es
        if user_id:
            try:
                user = User.objects.get(pk=user_id)
                request.user = user
                print(f"   üë§ Utilisateur charg√© : {user.username} (ID: {user.id})")
            except User.DoesNotExist:
                request.user = AnonymousUserManual()
                print(f"   ‚ö†Ô∏è  Utilisateur ID {user_id} introuvable")
                # Nettoyer la session
                del request.session['_auth_user_id']
        else:
            request.user = AnonymousUserManual()
            print(f"   üîì Aucun utilisateur connect√©")


class AnonymousUserManual:
    """Repr√©sente un utilisateur non connect√©"""
    id = None
    pk = None
    username = ''
    is_staff = False
    is_active = False
    is_superuser = False
    is_authenticated = False
    
    def __str__(self):
        return 'AnonymousUser'
    
    def __bool__(self):
        return False


# ========================================
# REMPLACE CsrfViewMiddleware
# ========================================
class ManualCsrfMiddleware(MiddlewareMixin):
    """
    Ce que Django fait automatiquement avec CsrfViewMiddleware :
    - G√©n√©rer un token CSRF unique
    - V√©rifier le token sur POST/PUT/DELETE
    - Bloquer les requ√™tes sans token valide
    """
    
    def process_request(self, request):
        """AVANT que la vue soit appel√©e"""
        print("üü° [MANUEL] CsrfMiddleware activ√©")
        
        # 1. G√©n√©rer un token CSRF unique
        session_key = request.session.session_key if hasattr(request, 'session') else 'no-session'
        csrf_token = hashlib.sha256(f"{session_key}-csrf-secret".encode()).hexdigest()[:32]
        
        # 2. Stocker le token dans request.META (pour les templates)
        request.META['CSRF_COOKIE'] = csrf_token
        print(f"   üîë Token CSRF g√©n√©r√© : {csrf_token[:16]}...")
        
        # 3. V√©rifier le token sur POST/PUT/DELETE
        if request.method in ['POST', 'PUT', 'DELETE', 'PATCH']:
            
            # Exemptions (login, register, etc.)
            exempt_paths = ['/login/', '/register/']
            if any(request.path.startswith(path) for path in exempt_paths):
                print(f"   ‚ö™ {request.path} exempt√© de CSRF")
                return None
            
            # R√©cup√©rer le token soumis par le client
            submitted_token = (
                request.POST.get('csrfmiddlewaretoken') or
                request.META.get('HTTP_X_CSRFTOKEN') or
                request.COOKIES.get('csrftoken')
            )
            
            # Comparer les tokens
            if submitted_token != csrf_token:
                print(f"   ‚ùå CSRF INVALIDE ! Requ√™te bloqu√©e")
                return HttpResponseForbidden("403 Forbidden - CSRF verification failed")
            else:
                print(f"   ‚úÖ Token CSRF valide")
    
    def process_response(self, request, response):
        """APR√àS que la vue a √©t√© ex√©cut√©e"""
        
        # Ajouter le cookie CSRF √† la r√©ponse
        if hasattr(request, 'META') and 'CSRF_COOKIE' in request.META:
            response.set_cookie(
                key='csrftoken',
                value=request.META['CSRF_COOKIE'],
                max_age=31449600,  # 1 an
                httponly=False,  # JavaScript doit pouvoir y acc√©der
                secure=False,
                samesite='Lax'
            )
            print(f"   üç™ Cookie 'csrftoken' envoy√©")
        
        return response


# ========================================
# 4Ô∏è‚É£ REMPLACE MessageMiddleware
# ========================================
class ManualMessageMiddleware(MiddlewareMixin):
    """
    Ce que Django fait automatiquement avec MessageMiddleware :
    - Stocker les messages dans la session
    - Fournir messages.success(), messages.error(), etc.
    """
    
    def process_request(self, request):
        """AVANT que la vue soit appel√©e"""
        print("üü£ [MANUEL] MessageMiddleware activ√©")
        
        # Charger les messages depuis la session
        if hasattr(request, 'session'):
            messages_list = request.session.get('_messages', [])
            request._messages_storage = messages_list
            print(f"   üì¨ {len(messages_list)} message(s) charg√©(s)")
    
    def process_response(self, request, response):
        """APR√àS que la vue a √©t√© ex√©cut√©e"""
        
        # Sauvegarder les messages dans la session
        if hasattr(request, '_messages_storage') and hasattr(request, 'session'):
            request.session['_messages'] = request._messages_storage
            print(f"   üíæ Messages sauvegard√©s dans la session")
        
        return response


# ========================================
# FONCTIONS HELPER POUR LES VUES
# ========================================

def manual_login(request, user):
    """
    REMPLACE : from django.contrib.auth import login
    
    Utilisation dans vos vues :
        from exams.replacements import manual_login
        manual_login(request, user)
    """
    print(f"üîê [MANUEL] Connexion de {user.username}")
    request.session['_auth_user_id'] = user.pk
    request.session['_auth_user_backend'] = 'django.contrib.auth.backends.ModelBackend'
    request.session.modified = True
    request.user = user


def manual_logout(request):
    """
    REMPLACE : from django.contrib.auth import logout
    
    Utilisation dans vos vues :
        from exams.replacements import manual_logout
        manual_logout(request)
    """
    print(f"üö™ [MANUEL] D√©connexion")
    request.session.flush()
    request.user = AnonymousUserManual()